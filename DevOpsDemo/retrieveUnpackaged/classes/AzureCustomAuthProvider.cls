//create a custom OAuth-based authentication provider plug-in for single sign-on in to Salesforce. 
//References: 
//  Salesforce: https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_class_Auth_AuthProviderPluginClass.htm?search_text=httprequest
//  Azure Ad Oauth: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow
global class AzureCustomAuthProvider extends Auth.AuthProviderPluginClass {

          // ---- Api names for the custom metadata type created for this auth provider. ---
          //private String customMetadataTypeApiName='AzureCustomMeta__mdt'; 
          public static final String customMetadataTypeApiName='MicrosoftAzure_ClientCredentials__mdt'; 
          public static final String authUrlApi='Auth_URL__c';
          public static final String keyApi='Client_ID__c';
          public static final String secretApi='Client_Secret__c';
          public static final String accessTokenUrlApi='Token_URL__c';
          public static final String userAPIUrlApi = 'UserInfo_URL__c';
          public static final String userAPIVersionUrlApi ='API_User_Version_Url__c';
          public static final String redirectUrlApi = 'Callback_URL__c'; 
          public static final String scopeApi = 'Scope_API__c';
          public static final String scopeGApi = 'Scope_GraphAPI__c';

          // Auth Provider Name
          public static final String AuthProviderTokenName ='AzureSSO';

          //nonce: A value included in the request, generated by the app, that will be included in the resulting id_token as a claim. unique string that can be used to identify the origin of the request
          private String nonce= 'RBC_CRM';

          // Use this URL for the endpoint that the 
          // authentication provider calls back to for configuration.
          public String redirectUrl; 
          private String key;
          private String secret;
          
          // Application redirection to the Concur website for 
          // authentication and authorization.
          private String authUrl;  
          
          // URI to get the new access token from concur using the GET verb.
          private String accessTokenUrl; 
          private String scope; 
          private String scopeGraphAPI; 
          
          // Api URL to access the user in Concur
          private String userAPIUrl; 
          
          // Version of the user api URL to access data from Concur
          private String userAPIVersionUrl; 
          
          global String getCustomMetadataType() {
              return customMetadataTypeApiName;
          } 
            
          global PageReference initiate(Map<string,string> 
            authProviderConfiguration, String stateToPropagate) 
            { 
                authUrl = authProviderConfiguration.get(authUrlApi); 
                key = authProviderConfiguration.get(keyApi); 
                redirectUrl = authProviderConfiguration.get(redirectUrlApi);
                scope = authProviderConfiguration.get(scopeApi);
                
                //URLEncode some variables
                scope=EncodingUtil.urlEncode(scope,'UTF-8');
                redirectUrl=EncodingUtil.urlEncode(redirectUrl,'UTF-8');

                //Request an authorization code as per: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#request-an-authorization-code
                //scope ='https%3A%2F%2Fgraph.microsoft.com%2FUser.Read';
                String url = authUrl + '?client_id='+ key +'&response_type=code&scope='+ scope + '&redirect_uri='+ redirectUrl + '&state=' + stateToPropagate +'&response_mode=query&nonce=' + nonce;             
                System.debug('initiate()- State: ' + stateToPropagate);
                System.debug('initiate()- scope: ' + scope);      

                return new PageReference(url); 
            } 
            
            global Auth.AuthProviderTokenResponse handleCallback(Map<string,string> 
            authProviderConfiguration, Auth.AuthProviderCallbackState state ) 
            { 
                System.debug('---handleCallback():start[token] ---');
                
                key = authProviderConfiguration.get(keyApi); 
                secret = authProviderConfiguration.get(secretApi); 
                accessTokenUrl = authProviderConfiguration.get(accessTokenUrlApi); 
                redirectUrl = authProviderConfiguration.get(redirectUrlApi);
                scope = authProviderConfiguration.get(scopeApi);

                //URLEncode some Variables
                scope=EncodingUtil.urlEncode(scope,'UTF-8');
                redirectUrl=EncodingUtil.urlEncode(redirectUrl,'UTF-8');
            
                //authorization code
                Map<String,String> queryParams = state.queryParameters; 
                String sfdcState = queryParams.get('state'); 
                String code = queryParams.get('code'); 

                System.debug('handleCallback()-state: ' + state);
                System.debug('handleCallback()-code: ' + code);
                System.debug('handleCallback()-scope: ' + scope);
                System.debug('handleCallback()-redirectUrl: ' + redirectUrl);

                //Redeem "Code" for an "access token" - "Code" was acquired during "authorization code" call (above) as per: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#redeem-a-code-for-an-access-token
                //IMPORTANT: make sure that "accessTokenUrl" value is added to Administration Setup  > Security Controls > Remote Site Settings
                HttpRequest req = new HttpRequest();  
                HttpResponse resp = new HttpResponse();               
                AzureTokenResponseJson tokenResponse;
                String responseBody='';
                req.setEndpoint(accessTokenUrl); 
                req.setBody('code=' + code + '&grant_type=authorization_code&scope='+ scope + '&redirect_uri='+ redirectUrl +'&client_id=' + key + '&client_secret=' + secret);                 
                req.setHeader('Content-Type','application/x-www-form-urlencoded'); 
                req.setMethod('POST');             
                Http http = new Http();                 
                try {
                    resp = http.send(req); 
                    responseBody = resp.getBody();  
                    System.debug('handleCallback()-ResponseRaw:'+ responseBody);                    
                    tokenResponse = (AzureTokenResponseJson)JSON.deserializeStrict(responseBody,AzureTokenResponseJson.class);
                }  catch(System.CalloutException e) {
                    System.debug('handleCallback()-Get Access Token error: '+ e);
                    System.debug('handleCallback()-SalesforceErrorMsg:'+ resp.toString());
                    System.debug('handleCallback()-HttpError:'+ resp.getStatus());                    
                    System.debug('handleCallback()-HttpErrorCode:'+ resp.getStatusCode()); 
                    throw e;
                }

                String token = tokenResponse.access_token;                 
                String refreshToken = tokenResponse.refresh_token; 
                
                //Debugging
                System.debug('handleCallback()-token: ' + token);
                System.debug('handleCallback()-refreshToken: ' + refreshToken);                
                System.debug('---handleCallback():end[token] ---');

                return new Auth.AuthProviderTokenResponse(AuthProviderTokenName, token, 
                'refreshToken', sfdcState); 
            } 
                       
            global Auth.UserData getUserInfo(Map<string,string> 
            authProviderConfiguration, 
            Auth.AuthProviderTokenResponse response) 
            {                 
                userAPIUrl = authProviderConfiguration.get(userAPIUrlApi);   
                String token = response.oauthToken; 
                String tokenrefres = response.oauthSecretOrRefreshToken;
                System.debug('---getUserInfo():token:' +token);
                System.debug('---getUserInfo():refresh:' + tokenrefres);
                System.debug('---getUserInfo():provider:' + response.provider);
                System.debug('---getUserInfo():state:' + response.state);
                System.debug('---getUserInfo():userAPIUrl:' +userAPIUrl);

                String DecodedJwt = decodeJwt(token);
                JwtBodyJson jwtInfo = (JwtBodyJson)JSON.deserializeStrict(DecodedJwt,JwtBodyJson.class);

                //JwtBodyJson


                //key = authProviderConfiguration.get(keyApi);                 
                //secret = authProviderConfiguration.get(secretApi); 
                //redirectUrl = authProviderConfiguration.get(redirectUrlApi);
                //scopeGraphAPI = authProviderConfiguration.get(scopeGApi);
                //scope=EncodingUtil.urlEncode(scope,'UTF-8');
                //redirectUrl=EncodingUtil.urlEncode(redirectUrl,'UTF-8');
                
                
                //System.debug('---getUserInfo():scopeGraphAPI:' +scopeGraphAPI);
                

                //To Call User EndPoint to get user information from Azure AD, we **MUST** have a **GraphAPI Token** - even if we previously 
                //  got a regular token for APi calls(Apigee)! Therefore we Request an ID token as well (hybrid flow)
                //  IMPORTANT: make sure that "userAPIUrl" value is added to Administration Setup  > Security Controls > Remote Site Settings
                /*
                HttpRequest req = new HttpRequest();  
                HttpResponse resp = new HttpResponse();               
                AzureUserInfoJson UserResponse;
                String responseBody='';
                req.setEndpoint(userAPIUrl);
                req.setHeader('Authorization', 'Bearer ' + token);                  
                req.setHeader('Content-Type','application/xml'); 
                req.setMethod('GET');                 
                Http http = new Http();                 
                try {
                    resp = http.send(req); 
                    responseBody = resp.getBody();  
                    System.debug('getUserInfo()-ResponseRaw:'+ responseBody);                    
                    UserResponse = (AzureUserInfoJson)JSON.deserializeStrict(responseBody,AzureUserInfoJson.class);
                }  catch(System.CalloutException e) {
                    System.debug('getUserInfo()-Get UserInfo error: '+ e);
                    System.debug('getUserInfo()-SalesforceErrorMsg:'+ resp.toString());
                    System.debug('getUserInfo()-HttpError:'+ resp.getStatus());                    
                    System.debug('getUserInfo()-HttpErrorCode:'+ resp.getStatusCode()); 
                    throw e;
                }





                String id = getTokenValueFromResponse(responseBody, 
                'LoginId',userAPIVersionUrl); 
                String fname = getTokenValueFromResponse(responseBody, 
                'FirstName', userAPIVersionUrl); 
                String lname = getTokenValueFromResponse(responseBody, 
                'LastName', userAPIVersionUrl); 
                String flname = fname + ' ' + lname; 
                String uname = getTokenValueFromResponse(responseBody, 
                'EmailAddress', userAPIVersionUrl); 
                String locale = getTokenValueFromResponse(responseBody, 
                'LocaleName', userAPIVersionUrl); 
                */
                Map<String,String> provMap = new Map<String,String>(); 
                provMap.put('what1', 'noidea1'); 
                provMap.put('what2', 'noidea2'); 
                
                String id = jwtInfo.sub; //'Ky2LclF9QNH08L7BXINOvPiryDsoPAuzcx29KoC1WqQ';
                String fname = jwtInfo.given_name; //'Rilton';
                String lname = jwtInfo.family_name; //'Souza-updt';
                String flname = fname + ' ' + lname;//'Rilton Souza-updt';
                //String uname = jwtInfo.email;//'rilton.souza@rbc.com';
                String uname = jwtInfo.upn; // it's upn in our Azure token, RS' token contained email
                String locale ='eng-us';

                return new Auth.UserData(id, fname, lname, flname,
                  uname, 'what', locale, null, AuthProviderTokenName, null, provMap); 
            } 
            
            private String getTokenValueFromResponse(String response, 
            String token, String ns) 
            { 
                Dom.Document docx = new Dom.Document(); 
                docx.load(response); 
                String ret = null; 
            
                dom.XmlNode xroot = docx.getrootelement() ; 
                if(xroot != null){ ret = xroot.getChildElement(token, ns).getText(); 
                } 
            return ret; 
            }

            private String decodeJwt(string token){
                System.debug('decodeJwt()-JwtValue: '+ token);
                
                String tokenTmp = token.replace('.',',');
                String tokenBody = tokenTmp.split(',')[1]; 
                System.debug(tokenBody);                                 
                String base64Value = tokenBody.replace('-', '+').replace('_', '/');
                String jwtDecoded = (encodingutil.base64Decode(base64Value)).toString();
                
                System.debug('decodeJwt()-JwtValue: '+ jwtDecoded);
                return jwtDecoded;
                
            } 
            
        }